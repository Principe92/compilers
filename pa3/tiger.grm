%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program | stm | stmlist | be | ae | ty | tyfds | tydec | vardec | fundec | lvalue | tyid

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%left OR
%left AND
%nonassoc EQ NEQ


%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* %change         EQ -> ASSIGN | ASSIGN -> EQ  *)
      (* |         SEMICOLON ELSE -> ELSE | INT INT END *)

%%

program	: stmlist		        (print("program -> stmlist\n"))

stmlist : stm                           (print("stmlist -> stm\n"))
        | stmlist stm                   (print("stmlist -> stmlist stm\n"))
        | stmlist SEMICOLON stm         (print("stmlist -> stmlist SEMICOLON stm\n"))
        | LET stmlist IN stmlist END    (print("stmlist -> LET stmlist IN stmlist END\n"))

stm     : ID ASSIGN ID                  (print("stm -> ID ASSIGN ae\n"))
        | WHILE ID DO stm               (print("stm -> WHILE ID DO stm\n"))
        | IF ID THEN stm                (print("stm -> IF ID THEN stm\n"))
        | IF ID THEN stm ELSE stm       (print("stm -> IF ID THEN stm ELSE stm\n"))
        | vardec                        (print("stm -> vardec\n"))
        | tydec                         (print("stm -> tydec\n"))
        | fundec                        (print("stm -> fundec\n"))

tydec   : TYPE tyid EQ ty               (print("tydec -> TYPE ID ASSIGN ty\n"))
        | tyid                          (print("tydec -> tyid\n"))

vardec  : VAR ID ASSIGN exp             (print("vardec -> VAR ID ASSIGN exp\n"))
        | VAR ID COLON tyid ASSIGN exp  (print("vardec -> VAR ID COLON tyid ASSIGN exp\n"))

fundec  : FUNCTION ID LPAREN tyfds RPAREN EQ exp                (print("fundec -> FUNCTION ID LPAREN tyfds RPAREN\n"))
        | FUNCTION ID LPAREN tyfds RPAREN COLON tyid EQ exp     (print("fundec -> FUNCTION ID LPAREN tyfds RPAREN COLON tyid EQ exp\n")) 

ty      : ID                          (print("ty -> ID\n"))
        | LBRACE tyfds RBRACE           (print("ty -> LBRACE tyfds RBRACE\n"))
        | ARRAY OF ID                 (print("ty -> ARRAY OF ID\n"))

tyfds   : NIL                           (print("tyfds -> NIL\n"))         
        | ID COLON tyid                 (print("tyfds -> ID COLON tyid\n"))
        | tyfds COMMA tyfds             (print("tyfds -> tyfds COMMA tyfds\n"))

(* be      : be OR be                      (print("be -> be OR be"))
        | be AND be                     (print("be -> be AND be"))
        | ae EQ ae                      (print("be -> ae EQ ae"))
        | ID                            (print("be -> ID"))

ae      : ae PLUS ae                    (print("ae -> ae PLUS ae"))
        | ID                            (print("ae -> ID")) *)

lvalue  : ID                            (print("lvalue -> ID\n"))
        | lvalue DOT ID                 (print("lvalue -> lvalue DOT ID\n"))
        | lvalue LBRACK exp RBRACK      (print("lvalue -> lvalue LBRACK exp RBRACK\n"))
        | lvalue OF exp                 (print("lvalue -> lvalue OF exp\n"))
	
exp     : lvalue		        (print("exp -> lvalue\n"))
        | INT                           (print("exp -> INT\n"))
        | STRING                        (print("exp -> STRING\n"))
        | exp AND exp                   (print("exp -> exp AND exp\n"))
        | exp EQ exp                    (print("exp -> exp EQ exp\n"))
        | exp PLUS exp                  (print("exp -> exp PLUS exp\n"))
        | exp MINUS exp                 (print("exp -> exp MINUS exp\n"))
        | exp TIMES exp                 (print("exp -> exp TIMES exp\n"))
        | MINUS exp %prec UMINUS        (print("exp -> MINUS exp\n"))
        | LPAREN exp RPAREN             (print("exp -> LPAREN exp RPAREN\n"))
        (* | ARRAY lvalue                        (print("exp -> lvalue")) *)

tyid    : ID                            (print("tyid -> ID\n"))
